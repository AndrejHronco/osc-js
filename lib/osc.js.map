{"version":3,"file":null,"sources":["../src/entity.js","../src/utils.js","../src/helpers.js","../src/atomic.js","../src/atomic/int32.js","../src/atomic/float32.js","../src/atomic/string.js","../src/atomic/blob.js","../src/message.js","../src/atomic/timetag.js","../src/bundle.js","../src/packet.js"],"sourcesContent":["export default class Entity {\n  constructor(value) {\n    this.value = value\n    this.offset = 0\n  }\n}\n","export function isInt(n) {\n  return Number(n) === n && n % 1 === 0\n}\n\nexport function isFloat(n) {\n  return Number(n) === n && n % 1 !== 0\n}\n\nexport function isString(n) {\n  return typeof n === 'string'\n}\n\nexport function isArray(n) {\n  return Object.prototype.toString.call(n) === '[object Array]'\n}\n\nexport function isBlob(n) {\n  return n instanceof Uint8Array\n}\n\nexport function isDate(n) {\n  return n instanceof Date\n}\n\nexport function pad(n) {\n  return (n + 3) & ~0x03\n}\n","import { isArray, isInt, isFloat, isString, isBlob } from './utils'\n\nexport function typeChar(item) {\n  if (isInt(item)) {\n    return 'i'\n  } else if (isFloat(item)) {\n    return 'f'\n  } else if (isString(item)) {\n    return 's'\n  } else if (isBlob(item)) {\n    return 'b'\n  }\n\n  throw new Error('OSC Message found unknown value type.')\n}\n\nexport function prepareAddress(obj) {\n  let address = ''\n\n  if (isArray(obj)) {\n    return `/${obj.join('/')}`\n  } else if (isString(obj)) {\n    address = obj\n    if (address.length > 1 && address[address.length - 1] === '/') {\n      address = address.slice(0, address.length - 1)\n    }\n    if (address.length > 1 && address[0] !== '/') {\n      address = `/${address}`\n    }\n    return address\n  }\n\n  throw new Error('OSC Helpers can only prepare addresses which are Array of String.')\n}\n\nexport default class Helper {\n  constructor() {\n    this.data = []\n    this.byteLength = 0\n  }\n\n  add(item) {\n    const buffer = item.pack()\n    this.byteLength += buffer.byteLength\n    this.data.push(buffer)\n    return this\n  }\n\n  merge() {\n    const result = new Uint8Array(this.byteLength)\n    let offset = 0\n\n    this.data.forEach((data) => {\n      result.set(data, offset)\n      offset += data.byteLength\n    })\n\n    return result\n  }\n}\n","import Entity from './entity'\n\nexport default class Atomic extends Entity {\n  pack(type, byteLength) {\n    const data = new Uint8Array(byteLength)\n    const dataView = new DataView(data.buffer)\n\n    if (!this.value) {\n      throw new Error('OSC Atomic can not be encoded with empty value.')\n    }\n\n    dataView[type](this.offset, this.value, false)\n\n    return data\n  }\n\n  unpack(dataView, type, byteLength, offset = 0) {\n    this.value = dataView[type](offset, false)\n    this.offset = offset + byteLength\n\n    return this.offset\n  }\n}\n","import { isInt } from '../utils'\n\nimport Atomic from '../atomic'\n\nexport default class AtomicInt32 extends Atomic {\n  constructor(value) {\n    if (value && !isInt(value)) {\n      throw new Error('OSC AtomicInt32 constructor expects value of type integer number.')\n    }\n\n    super(value)\n  }\n\n  pack() {\n    return super.pack('setInt32', 4)\n  }\n\n  unpack(dataView, offset = 0) {\n    return super.unpack(dataView, 'getInt32', 4, offset)\n  }\n}\n","import { isFloat } from '../utils'\n\nimport Atomic from '../atomic'\n\nexport default class AtomicFloat32 extends Atomic {\n  constructor(value) {\n    if (value && !isFloat(value)) {\n      throw new Error('OSC AtomicFloat32 constructor expects value of type float number.')\n    }\n\n    super(value)\n  }\n\n  pack() {\n    return super.pack('setFloat32', 4)\n  }\n\n  unpack(dataView, offset = 0) {\n    return super.unpack(dataView, 'getFloat32', 4, offset)\n  }\n}\n","import { pad } from '../utils'\n\nimport Atomic from '../atomic'\n\nexport default class AtomicString extends Atomic {\n  constructor(value) {\n    if (value && typeof value !== 'string') {\n      throw new Error('OSC AtomicString constructor expects value of type string.')\n    }\n\n    super(value)\n  }\n\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC AtomicString can not be encoded with empty value.')\n    }\n\n    const terminated = `${this.value}\\u0000`\n    const byteLength = pad(terminated.length)\n    const buffer = new Uint8Array(byteLength)\n\n    for (let i = 0; i < terminated.length; i += 1) {\n      buffer[i] = terminated.charCodeAt(i)\n    }\n\n    return buffer\n  }\n\n  unpack(dataView, offset = 0) {\n    let end = offset\n    let charcode\n    const data = []\n\n    for (; end < dataView.byteLength; end += 1) {\n      charcode = dataView.getUint8(end)\n\n      if (charcode !== 0) {\n        data.push(charcode)\n      } else {\n        end += 1\n        break\n      }\n    }\n\n    if (end === dataView.length) {\n      throw new Error('OSC AtomicString found a malformed OSC string.')\n    }\n\n    this.offset = pad(end)\n    this.value = String.fromCharCode.apply(null, data)\n\n    return this.offset\n  }\n}\n","import { isBlob, pad } from '../utils'\n\nimport Atomic from '../atomic'\n\nexport default class AtomicBlob extends Atomic {\n  constructor(value) {\n    if (value && !isBlob(value)) {\n      throw new Error('OSC AtomicBlob constructor expects value of type Uint8Array.')\n    }\n\n    super(value)\n  }\n\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC AtomicBlob can not be encoded with empty value.')\n    }\n\n    const byteLength = pad(this.value.byteLength)\n    const data = new Uint8Array(byteLength + 4)\n    const dataView = new DataView(data.buffer)\n\n    dataView.setInt32(0, this.value.byteLength, false)\n    data.set(this.value, 4)\n\n    return data\n  }\n\n  unpack(dataView, offset = 0) {\n    const byteLength = dataView.getInt32(offset, false)\n\n    this.value = new Uint8Array(dataView.buffer, offset + 4, byteLength)\n    this.offset = pad(offset + 4 + byteLength)\n\n    return this.offset\n  }\n}\n","import { isString, isArray, isInt, isFloat, isBlob } from './utils'\n\nimport Helper, { typeChar, prepareAddress } from './helpers'\n\nimport AtomicInt32 from './atomic/int32'\nimport AtomicFloat32 from './atomic/float32'\nimport AtomicString from './atomic/string'\nimport AtomicBlob from './atomic/blob'\n\nexport default class Message {\n  constructor(...args) {\n    this.offset = 0\n    this.address = ''\n    this.types = ''\n    this.args = []\n\n    this.timetag = 0\n\n    if (args.length > 0) {\n      if (!(isString(args[0]) || isArray(args[0]))) {\n        throw new Error('OSC Message constructor first argument (address) must be a string or array.')\n      }\n\n      this.address = prepareAddress(args.shift())\n      this.types = args.map(item => typeChar(item)).join('')\n      this.args = args\n    }\n  }\n\n  add(value) {\n    if (!value) {\n      throw new Error('OSC Message expects a valid value for adding.')\n    }\n\n    this.args.push(value)\n    this.types += typeChar(value)\n  }\n\n  pack() {\n    if (this.address.length === 0 || this.address[0] !== '/') {\n      throw new Error('OSC Message does not have a proper address.')\n    }\n\n    const encoder = new Helper()\n\n    encoder.add(new AtomicString(this.address))\n    encoder.add(new AtomicString(`,${this.types}`))\n\n    if (this.args.length > 0) {\n      let argument\n\n      this.args.forEach((value) => {\n        if (isInt(value)) {\n          argument = new AtomicInt32(value)\n        } else if (isFloat(value)) {\n          argument = new AtomicFloat32(value)\n        } else if (isString(value)) {\n          argument = new AtomicString(value)\n        } else if (isBlob(value)) {\n          argument = new AtomicBlob(value)\n        } else {\n          throw new Error('OSC Message found unknown argument type.')\n        }\n\n        encoder.add(argument)\n      })\n    }\n\n    return encoder.merge()\n  }\n\n  unpack(dataView, offset = 0) {\n    const address = new AtomicString()\n    address.unpack(dataView, offset)\n\n    const types = new AtomicString()\n    types.unpack(dataView, address.offset)\n\n    if (address.value.length === 0 || address.value[0] !== '/') {\n      throw new Error('OSC Message found malformed or missing address string.')\n    }\n\n    if (types.value.length === 0 && types.value[0] !== ',') {\n      throw new Error('OSC Message found malformed or missing type string.')\n    }\n\n    let end = types.offset\n    let next\n    let type\n\n    const args = []\n\n    for (let i = 1; i < types.value.length; i += 1) {\n      type = types.value[i]\n\n      if (type === 'i') {\n        next = new AtomicInt32()\n      } else if (type === 'f') {\n        next = new AtomicFloat32()\n      } else if (type === 's') {\n        next = new AtomicString()\n      } else if (type === 'b') {\n        next = new AtomicBlob()\n      } else {\n        throw new Error('OSC Message found non-standard argument type.')\n      }\n\n      end = next.unpack(dataView, end)\n      args.push(next.value)\n    }\n\n    this.offset = end\n    this.address = address.value\n    this.types = types.value\n    this.args = args\n\n    return this.offset\n  }\n}\n","import { isInt, isDate } from '../utils'\n\nimport Atomic from '../atomic'\n\nexport const SECONDS_70_YEARS = 2208988800\nexport const TWO_POWER_32 = 4294967296\n\nexport class Timetag {\n  constructor(seconds = 0, fractions = 0) {\n    if (!(isInt(seconds) && isInt(fractions))) {\n      throw new Error('OSC Timetag constructor expects values of type integer number.')\n    }\n\n    this.seconds = seconds\n    this.fractions = fractions\n  }\n\n  timestamp(milliseconds) {\n    let seconds\n\n    if (typeof milliseconds === 'number') {\n      seconds = milliseconds / 1000\n      const rounded = Math.floor(seconds)\n\n      this.seconds = rounded + SECONDS_70_YEARS\n      this.fractions = Math.round(TWO_POWER_32 * (seconds - rounded))\n\n      return milliseconds\n    }\n\n    seconds = this.seconds - SECONDS_70_YEARS\n    return (seconds + (this.fractions / TWO_POWER_32)) * 1000\n  }\n}\n\nexport default class AtomicTimetag extends Atomic {\n  constructor(value) {\n    let timetag = new Timetag()\n\n    if (value instanceof Timetag) {\n      timetag = value\n    } else if (isInt(value)) {\n      timetag.timestamp(value)\n    } else if (isDate(value)) {\n      timetag.timestamp(value.getTime())\n    } else {\n      timetag.timestamp(Date.now())\n    }\n\n    super(timetag)\n  }\n\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC AtomicTimetag can not be encoded with empty value.')\n    }\n\n    const { seconds, fractions } = this.value\n    const data = new Uint8Array(8)\n    const dataView = new DataView(data.buffer)\n\n    dataView.setInt32(0, seconds, false)\n    dataView.setInt32(4, fractions, false)\n\n    return data\n  }\n\n  unpack(dataView, offset = 0) {\n    const seconds = dataView.getUint32(offset, false)\n    const fractions = dataView.getUint32(offset + 4, false)\n\n    this.value = new Timetag(seconds, fractions)\n    this.offset = offset + 8\n\n    return this.offset\n  }\n}\n","import { isArray, isInt } from './utils'\n\nimport EncodeHelper from './helpers'\n\nimport Packet from './packet'\nimport Message from './message'\nimport AtomicString from './atomic/string'\nimport AtomicInt32 from './atomic/int32'\nimport AtomicTimetag from './atomic/timetag'\n\nexport const BUNDLE_TAG = '#bundle'\n\nexport default class Bundle {\n  constructor(...args) {\n    this.offset = 0\n    this.timetag = new AtomicTimetag()\n    this.bundleElements = []\n\n    if (args.length > 0) {\n      if (args[0] instanceof AtomicTimetag) {\n        this.timetag = args.shift()\n      } else if (isArray(args[0])) {\n        args[0].forEach((item) => {\n          this.add(item)\n        })\n\n        if (args.length > 1 && args[1] instanceof AtomicTimetag) {\n          this.timetag = new AtomicTimetag(args[1])\n        }\n      } else {\n        args.forEach((item) => {\n          this.add(item)\n        })\n      }\n    }\n  }\n\n  timestamp(ms) {\n    if (!isInt(ms)) {\n      throw new Error('OSC Bundle needs an Integer for setting its timestamp.')\n    }\n\n    this.timetag = new AtomicTimetag(ms)\n  }\n\n  add(item) {\n    if (!(item instanceof Message || item instanceof Bundle)) {\n      throw new Error('OSC Bundle contains only Messages and Bundles.')\n    }\n\n    this.bundleElements.push(item)\n  }\n\n  pack() {\n    const encoder = new EncodeHelper()\n\n    encoder.add(new AtomicString(BUNDLE_TAG))\n\n    if (!this.timetag) {\n      this.timetag = new AtomicTimetag()\n    }\n\n    encoder.add(this.timetag)\n\n    this.bundleElements.forEach((item) => {\n      encoder.add(new AtomicInt32(item.pack().byteLength))\n      encoder.add(item)\n    })\n\n    return encoder.merge()\n  }\n\n  unpack(dataView, offset = 0) {\n    const head = new AtomicString()\n    head.unpack(dataView, offset)\n\n    if (head.value !== BUNDLE_TAG) {\n      throw new Error('OSC Bundle does not contain a valid #bundle head.')\n    }\n\n    const timetag = new AtomicTimetag()\n    let end = timetag.unpack(dataView, head.offset)\n\n    this.bundleElements = []\n\n    while (end < dataView.byteLength) {\n      const packet = new Packet()\n      const size = new AtomicInt32()\n\n      end = size.unpack(dataView, end)\n      end = packet.unpack(dataView, end)\n\n      this.bundleElements.push(packet.value)\n    }\n\n    this.offset = end\n    this.timetag = timetag\n\n    return this.offset\n  }\n}\n","import Entity from './entity'\nimport Bundle, { BUNDLE_TAG } from './bundle'\nimport Message from './message'\nimport AtomicString from './atomic/string'\n\nexport default class Packet extends Entity {\n  constructor(value) {\n    if (value && !(value instanceof Message || value instanceof Bundle)) {\n      throw new Error('OSC Packet can only consist of Message or Bundle.')\n    }\n\n    super(value)\n  }\n\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC Packet can not be encoded with empty body.')\n    }\n\n    return this.value.pack()\n  }\n\n  unpack(dataView, offset = 0, timetag) {\n    if (dataView.byteLength % 4 !== 0) {\n      throw new Error('OSC Packet byteLength has to be a multiple of four.')\n    }\n\n    const head = new AtomicString()\n    head.unpack(dataView, offset)\n\n    let item\n\n    if (head.value === BUNDLE_TAG) {\n      item = new Bundle()\n    } else {\n      item = new Message()\n      if (timetag) {\n        item.timetag = timetag\n      }\n    }\n\n    item.unpack(dataView, offset)\n\n    this.offset = item.offset\n    this.value = item\n\n    return this.offset\n  }\n}\n"],"names":["Entity","value","offset","isInt","n","Number","isFloat","isString","isArray","Object","prototype","toString","call","isBlob","Uint8Array","isDate","Date","pad","typeChar","item","Error","prepareAddress","obj","address","join","length","slice","Helper","data","byteLength","buffer","pack","push","result","forEach","set","Atomic","type","dataView","DataView","AtomicInt32","AtomicFloat32","AtomicString","terminated","i","charCodeAt","end","charcode","getUint8","String","fromCharCode","apply","AtomicBlob","setInt32","getInt32","Message","types","args","timetag","shift","map","encoder","add","argument","merge","unpack","next","SECONDS_70_YEARS","TWO_POWER_32","Timetag","seconds","fractions","milliseconds","rounded","Math","floor","round","AtomicTimetag","timestamp","getTime","now","getUint32","BUNDLE_TAG","Bundle","bundleElements","ms","EncodeHelper","head","packet","Packet","size"],"mappings":"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"}